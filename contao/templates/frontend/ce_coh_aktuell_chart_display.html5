<div id="wrapper_<?= $this->chartId ?>" class="chart-wrapper framework7-container" style="max-width: 700px; padding: 1rem;">
<?php
// !!!! Achtung: Dieses Template benötigt das JS-Template js_coh_chart_script im Layout! Beim Deinstallieren den Eintrag aus dem Layout entfernen!
?>
<?php 
if ($this->syncError) {
  echo '<div class="error">'.$this->syncError.'</div>';
} else {
//var_dump($this->data);
  echo '<p>akt. Werte vom:'.$this->lastPullSync.'</p>';
  echo '<p>push Tabellen am:'.$this->lastPullSync.'</p>';
}
?>
  <script>
    const chartId = '<?= $this->chartId ?>';
    const data = <?= json_encode($this->data ?? [], JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP) ?>;


    const sensorConfig = [
      { sensorId: 'IQbattery_94_battery_stateOfCharge', icon: 'gauge', iconSize: 50, color: 'green'},
      { sensorId: 'IQinverter_94_inverter_pvPower', icon: 'cloud_sun', iconSize: 24, iconColor: 'green' },
      { sensorId: 'IQinverter_94_inverter_selfConsumptionPower', icon: 'house', iconSize: 24, iconColor: 'green' },      
      { sensorId: 'ELaktTemp2', icon: 'thermometer', iconSize: 24, iconColor: 'green' },
      { sensorId: 'ELaktPwr', icon: 'power', iconSize: 24, iconColor: 'green' },
      { sensorId: 'IQBatt_Temp', icon: 'thermometer', iconSize: 24, iconColor: 'red' },
      { sensorId: 'IQbattery_94_battery_mode', icon: 'thermometer', iconSize: 24, iconColor: 'red' },
      { sensorId: 'IQbattery_94_battery_power', icon: 'battery_100', iconSize: 24, iconColor: 'green' },
      { sensorId: 'ZWZZaehlerPower', icon: 'arrow_branch', iconSize: 24, iconColor: 'red' },
      { sensorId: 'ZWZZaehlerTotalPVEnergie', icon: 'arrow_branch', iconSize: 24, iconColor: 'red' },
      { sensorId: 'Kommentar', icon: 'chevron_right', iconSize: 12, sensorTitle: ' Tasmota SWR Zähler', sensorValue: 'Daten'},
      { sensorId: 'TS_Power', icon: 'power', iconSize: 24, iconColor: 'green' },
      { sensorId: 'TS_E_in_108', icon: 'power', iconSize: 24, iconColor: 'green' },
      { sensorId: 'TS_E_out_208', icon: 'power', iconSize: 24, iconColor: 'green' },
      { sensorId: 'Kommentar', icon: 'chevron_right', iconSize: 12, sensorTitle: ' Heizstab', sensorValue: ''},
      { sensorId: 'ELaktboostactive', icon: 'circle_fill', iconSize: 24, iconColor: 'green' }, 
      { sensorId: 'RaspberryCheckHeizstabServer', icon: 'power', iconSize: 24, iconColor: 'green' },
      { sensorId: 'RaspberryHeizstabServerProtokoll', icon: 'power', iconSize: 24, iconColor: 'green' },
      { sensorId: 'RaspberryHeizstabServerIntervall', icon: 'arrow_2_squarepath', iconSize: 24, iconColor: 'green' }
            
    ];

    sensorConfig.forEach((config, index) => {
       let sensor = data[config.sensorId];
console.log("sensor "+config.sensorID);
        if (sensor === undefined) {
            // Spezialfall: ZWZZaehlerPower berechnen
            if (config.sensorId === 'Kommentar') {
                sensor = { time: '', label: config.sensorId,
                sensorTitle: config.sensorTitle ?? '', sensorId: config.sensorId, sensorValue: '-------' + (config.sensorValue ?? '') + '------', sensorEinheit: '', sensorValueType: '',sensorSource: 'System'
                };
            }        
            else if (config.sensorId === 'ZWZZaehlerPower') {
                const inData = data['ZWZZaehlerPowerIn'];
                const outData = data['ZWZZaehlerPowerOut'];
                if (inData && outData) {
                    const sensorValue = Number(outData.sensorValue) - Number(inData.sensorValue);
                    const iconColor = sensorValue >= 0 ? 'green' : 'red';
                    config.iconColor = iconColor;
                    sensor = { time: inData.time, label: config.sensorId, sensorTitle: 'SWR akt. Import/Export', sensorId: config.sensorId, sensorValue, sensorEinheit: inData.sensorEinheit,
                        sensorValueType: '',sensorSource: 'IQbox'
                    };
                }
            }
            // Spezialfall: ZWZZaehlerTotalPVEnergie berechnen
            else if (config.sensorId === 'ZWZZaehlerTotalPVEnergie') {
                const imp = data['ZWZZaehlerTotalPVEnergieImport'];
                const exp = data['ZWZZaehlerTotalPVEnergieExport'];
                if (imp && exp) {
                    const sensorValue = Number(exp.sensorValue) - Number(imp.sensorValue);
                    const iconColor = sensorValue >= 0 ? 'green' : 'red';
                    config.iconColor = iconColor;
                    sensor = { time: imp.time, label: config.sensorId, sensorTitle: 'Ges. Import/Export', sensorId: config.sensorId, sensorValue: `${imp.sensorValue}/${exp.sensorValue}`, sensorEinheit: imp.sensorEinheit,
                        sensorValueType: '', sensorSource: 'IQbox'
                    };
                }
            }
            // Wenn immer noch nicht gefunden → Warnung + return
            if (sensor === undefined) {
                console.warn(`Sensor mit ID ${config.sensorId} nicht gefunden`);
                return;
            }
        }
        // Farbanpassung für Heizstab booster
        if (config.sensorId === 'ELaktboostactive') {
            const iconColor = parseFloat(sensor.sensorValue) >= 0 ? 'green' : 'red';
            config.iconColor = iconColor;
        }
        // Farbanpassung für Heizstab-Server
        if (config.sensorId === 'RaspberryCheckHeizstabServer') {
            const iconColor = parseFloat(sensor.sensorValue) >= 0 ? 'green' : 'red';
            config.iconColor = iconColor;
        }
        if (config.sensorId === 'RaspberryHeizstabServerProtokoll') {
            sensor.sensorValue = '<br>'+sensor.sensorValue;
        }
        // Beschreibung für Anzeige mit F7Item
        config.description = `${sensor.sensorTitle || ''}: ${sensor.sensorValue ?? ''} ${sensor.sensorEinheit ?? ''}`.trim();
        config.sensorValue = sensor.sensorValue ?? 0;
        console.log(`[${index}] ${config.sensorId}: ${sensor.sensorTitle}:`);
        console.log('sensor full:', sensor);
    });

    (function waitForF7App(maxAttempts = 50, attempt = 1) {
      if (typeof window.F7app !== 'undefined' && F7app.gauge) {
        const wrapper = document.getElementById('wrapper_<?= $this->chartId ?>');
        if (!wrapper) {
          console.error('Wrapper nicht gefunden!');
          return;
        }
        sensorConfig.forEach((config, index) => {
          const item = new F7Item();
          item.setAll({
            ...config,
            gaugeId: `gauge-<?= $this->chartId ?>-${index}`
          });
          item.render(wrapper);
        });

      } else if (attempt < maxAttempts) {
        setTimeout(() => waitForF7App(maxAttempts, attempt + 1), 50);
      } else {
        console.error(`F7App konnte nach ${maxAttempts} Versuchen nicht geladen werden. Abbruch.`);
      }
    })();
  </script>
</div>
