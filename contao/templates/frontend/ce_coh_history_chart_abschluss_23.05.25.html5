<?php
  if (empty($this->selectedSensors) && empty($this->chartdata)) {
    return;
  }

  $chartId = $this->chartId;
  $rangeField = $this->rangeField;
  $currentRange = $this->range;
  $chartdataRaw = $this->chartdata ?? null;
  $selectedSensors = $this->selectedSensors ?? [];
echo "<br>--------------------------------------------------<br>";
echo "chartId: $chartId rangeField: $rangeField currentRange:$currentRange len chartData ".strlen($chartdataRaw)." len selectors ".count($selectedSensors)."<br>";
echo "<br>--------------------------------------------------<br>";
  $hasData = false;
  if (is_string($chartdataRaw)) {
    $chartdataArray = json_decode($chartdataRaw, true);
    $hasData = !empty($chartdataArray['datasets']) && !empty($chartdataArray['labels']);
  }
?>


<div id="wrapper_<?= $chartId ?>" class="chart-wrapper" style="max-width: 700px;  padding: 1rem;">
  <!-- Range-Auswahl mit Erhalt anderer Werte -->
  <form method="get">
    <?php foreach ($_GET as $key => $value): ?>
      <?php if (str_starts_with($key, 'range_chart_') && $key !== $rangeField): ?>
        <input type="hidden" name="<?= htmlspecialchars($key) ?>" value="<?= htmlspecialchars($value) ?>">
      <?php endif; ?>
    <?php endforeach; ?>

    <label for="rangeSelect_<?= $chartId ?>">Zeitraum:</label>
    <select name="<?= $rangeField ?>" id="rangeSelect_<?= $chartId ?>" onchange="this.form.submit()">
      <option value="1d" <?= $currentRange === '1d' ? 'selected' : '' ?>>Seit gestern</option>
      <option value="1w" <?= $currentRange === '1w' ? 'selected' : '' ?>>1 Woche</option>
      <option value="1m" <?= $currentRange === '1m' ? 'selected' : '' ?>>1 Monat</option>
    </select>
  </form>

  <?php if (empty($selectedSensors)): ?>
    <p><em>‚ö†Ô∏è Keine Sensoren ausgew√§hlt.</em></p>

  <?php elseif (!$hasData): ?>
    <p><em>‚ö†Ô∏è Keine Sensordaten f√ºr den gew√§hlten Zeitraum gefunden.</em></p>

  <?php else: ?>
    <canvas id="<?= $chartId ?>"></canvas>

    <?php if (!isset($GLOBALS['CHART_JS_LOADED'])): ?>
      <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/luxon@3"></script>
      <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1"></script>
      <?php $GLOBALS['CHART_JS_LOADED'] = true; ?>
    <?php endif; ?>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const chartData = <?= $chartdataRaw ?>;
        const canvas = document.getElementById("<?= $chartId ?>");
        const ctx = canvas.getContext("2d");

        const existing = Chart.getChart(canvas);
        if (existing) existing.destroy();

        const axes = chartData.axes ?? {};
        const scales = {
          x: {
            type: 'time',
            time: { unit: 'day' },
            title: { display: true, text: 'Zeit' }
          }
        };

        let useLeft = true;
        for (const [axisId, info] of Object.entries(axes)) {
          const unit = info.unit || '';
          const color = info.color || '#000';

          scales[axisId] = {
            position: useLeft ? 'left' : 'right',
            title: { display: true, text: unit, color },
            ticks: {
              color,
              callback: val => unit !== 'default' ? `${val} ${unit}` : val
            },
            grid: { drawOnChartArea: useLeft }
          };

          useLeft = !useLeft;
        }

        new Chart(ctx, {
          type: 'line',
          data: {
            labels: chartData.labels,
            datasets: chartData.datasets
          },
          options: {
            responsive: true,
            maintainAspectRatio: true,
            aspectRatio: 2, // Breite : H√∂he ‚Üí 2:1
            interaction: {
              mode: 'nearest',
              intersect: false
            },
            scales: scales,
            elements: {
                line: {
                    borderWidth: 1 // üëà Alle Linien 2 Pixel dick
                },
                point: {
                    radius: 1,                    // Punktgr√∂√üe
                    pointStyle: 'circle',         // 'circle', 'rect', 'triangle', ...
                    backgroundColor: '#fff',      // Innenfarbe
                    borderColor: '#333',          // Randfarbe
                    borderWidth: 2                // Randdicke
                }
            },
            plugins: {
              legend: {
                display: true,
                position: 'top',
                align: 'start'
              },
              title: {
                display: true,
                text: <?= json_encode($this->headline ?? 'Sensorwerte √ºber Zeit') ?>
              },
              tooltip: {
                callbacks: {
                  label: function (ctx) {
                    const label = ctx.dataset.label || '';
                    const value = ctx.parsed.y;
                    const axisId = ctx.dataset.yAxisID;
                    const unit = chartData.axes?.[axisId]?.unit || '';
                    return `${label}: ${value}${unit !== 'default' ? ' ' + unit : ''}`;
                  }
                }
              }
            }
          }
        });
      });
    </script>
  <?php endif; ?>
  <?php echo "<!-- Template beendet f√ºr {$chartId} -->"; ?>
</div>
